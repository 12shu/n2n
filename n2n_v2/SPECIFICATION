                     +------------------------------+
                     | N2Nv3 Protocol Specification !
                     +------------------------------+

Procedure
---------

Note: The following flags are used:

KA   keep alive
ACK  acknowledge
AR   address resolution
CO   connect
R    resume

1. Joining the Network

Joining the Network is done by a 4-way handshake with the supernode. The first
two packets are used for a DH Exchange, the second two to exchange information.

A -> S: handshake syn
S -> A: handshake syn-ack
A -> S: packet: FLAGS, A_MAC, A_N2N_IP, A_LOCAL_SOCK
S -> A: packet: FLAGS, A_PUB_SOCK

2. Supernode keep-alive

A -> S: packet: FLAGS(KA)
S -> A: packet: FLAGS(KA+ACK)

3. ARP requests

A -> S: packet: FLAGS(AR),     B_IP
S -> A: packet: FLAGS(AR+ACK), B_IP, B_MAC

4. Establishing p2p connection to another edge

A -> S: packet: FLAGS(CO), B_MAC, A_Timeout, A_PUB_SOCK, A_LOCAL_SOCK
S -> B: packet: FLAGS(CO), B_MAC, A_Timeout, A_PUB_SOCK, A_LOCAL_SOCK
B -> A: dummy holepunch packet (will usually get lost)
B -> S: packet: FLAGS(CO+ACK), A_MAC, B_Timeout, B_PUB_SOCK, B_LOCAL_SOCK
S -> A: packet: FLAGS(CO+ACK), A_MAC, B_Timeout, B_PUB_SOCK, B_LOCAL_SOCK

A -> B: handshake syn
B -> A: handshake syn-ack
(final acknowledgement?)

5. Resume established connections with timeout for p2p hole

A -> S: packet: FLAGS(R), B_MAC, A_Timeout, A_PUB_SOCK, A_LOCAL_SOCK
S -> B: packet: FLAGS(R), B_MAC, A_Timeout, A_PUB_SOCK, A_LOCAL_SOCK
B -> A: dummy holepunch packet
(alternatively use end-to-end key here?)

6. Data packets:

A -> B: packet: DATA

7. Rekeying:
?

DECODING
--------

Edge:
1. Read first four byte to Integer SPI
SPI == NULL:
  Parse header, check version
  ... (TODO)
SPI != NULL:
  find peer P associated with SPI
  check (throw away if bad) & decrypt payload to PL
  if SPI == supernode:
    decode FLAGS
    ... (TODO)
  if SPI != SUPERNODE:
    assemble ethernet frame
    put payload PL

Supernode:
1. Read first four byte to Integer SPI
SPI == NULL:
  Parse header, check version
  ... (TODO)
SPI != NULL:
  find peer P associated with SPI
  check (throw away if bad) & decrypt payload to PL
  decode FLAGS
  ... (TODO)

FORMATS (work in progress)
-------

The packet type is always the first byte for any of the packets:

      0 1 2 3 4 5 6 7 
     +---------------+
   0 ! PktType       !
     +---------------+

PKT_SN:

when PktType = PKT_SN, the first 4 byte will always be link this:

      0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7
     +---------------+---------------+---------------+---------------+
   0 ! PktType       ! Version       ! Crypt-Version ! SN_Flags      !
     +---------------+---------------+---------------+---------------+

What follows is dependent on the SN_Flags

SN_Flag = DH_INIT

      0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7
     +---------------+---------------+---------------+---------------+
   4 ! HMAC_IV + DH Values (ECDH or g, p, A) + KDF_SALT_A + HMAC
     +---------------+---------------+---------------+---------------+

SN_Flag = DH_INIT + ACK

      0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7
     +---------------+---------------+---------------+---------------+
   4 ! HMAC_IV + DH Values (ECDH or B) + KDF_SALT_S + HMAC
     +---------------+---------------+---------------+---------------+

If the DH_INIT flag is not set, the rest of the packet (payload) will be in a
cryptographic container of the following format:

      0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7
     +---------------+---------------+---------------+---------------+
   4 ! 12 Byte AEAD_IV ...                                           :
     +---------------+---------------+---------------+---------------+
   8 : ...                                                           :
     +---------------+---------------+---------------+---------------+
  12 : ...                                              ... AEAD_IV  !
     +---------------+---------------+---------------+---------------+
     : PAYLOAD X BYTES
     +---------------+---------------+---------------+---------------+
   Y : 16 Byte AEAD_ICV ...
     +---------------+---------------+---------------+---------------+
 Y+4 : ...                                                           :
     +---------------+---------------+---------------+---------------+
 Y+8 : ...                                                           :
     +---------------+---------------+---------------+---------------+
 Y+12: ...                                             ... AEAD_ICV  :
     +---------------+---------------+---------------+---------------+


all that follows is contained in the encrypted and authenticated payload

SN_FLAG = REG
    This is the payload inside the crypto container:

      0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7
     +---------------+---------------+---------------+---------------+
  16 ! Community ...                                                 :
     +---------------+---------------+---------------+---------------+
  20 : ... Community ...                                             :
     +---------------+---------------+---------------+---------------+
  24 : ... Community ...                                             :
     +---------------+---------------+---------------+---------------+
  28 : ... Community                                                 !
     +---------------+---------------+---------------+---------------+
  32 ! MAC address ...                                               :
     +---------------+---------------+---------------+---------------+
  36 : ... MAC address ...           ! IP Address ...
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

SN_Flag = REG + ACK
    This is the payload inside the crypto container:

      0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7
     +---------------+---------------+---------------+---------------+
  16 ! Public Socket ...                                             :
     +---------------+---------------+---------------+---------------+
  20 : ... Public Socket                                             !
     +---------------+---------------+---------------+---------------+
  24 ! TODO: what else?                                              !
     +---------------+---------------+---------------+---------------+

SN_FLAG = KEEP_ALIVE

TODO

PKT_EXCHANGE:

      0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7
     +---------------+---------------+---------------+---------------+
   0 ! PktType       ! EX_Flags      ! 12 Byte AEAD_IV ...           :
     +---------------+---------------+---------------+---------------+
     : ...                                                           :
     +---------------+---------------+---------------+---------------+
     : ...                                                           :
     +---------------+---------------+---------------+---------------+
   0 : ...              ... AEAD_IV  ! destination MAC ...           :
     +---------------+---------------+---------------+---------------+
   4 : ... destination MAC ...                                       !
     +---------------+---------------+---------------+---------------+
   8 ! source MAC ...                                                :
     +---------------+---------------+---------------+---------------+
  12 : ... source MAC ...            ! source timeout                !
     +---------------+---------------+---------------+---------------+
  16 ! source socket 1 ...                                           :
     +---------------+---------------+---------------+---------------+
  20 : ... source socket 1                                           !
     +---------------+---------------+---------------+---------------+
  24 ! source socket 2 ...                                           :
     +---------------+---------------+---------------+---------------+
  28 : ... source socket 2                                           !
     +---------------+---------------+---------------+---------------+
   Y : 16 Byte AEAD_ICV ...
     +---------------+---------------+---------------+---------------+
 Y+4 : ...                                                           :
     +---------------+---------------+---------------+---------------+
 Y+8 : ...                                                           :
     +---------------+---------------+---------------+---------------+
 Y+12: ...                                             ... AEAD_ICV  :
     +---------------+---------------+---------------+---------------+

TODO

PKT_EDGE:

      0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   0 ! PktType       ! EDGE_Flags    !
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

TODO

PKT_DATA:

      0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7
     +---------------+---------------+---------------+---------------+
   0 ! PktType       ! source MAC / 2                                :
     +---------------+---------------+---------------+---------------+
   4 : ... source MAC                                ! dest. MAC ... :
     +---------------+---------------+---------------+---------------+
   8 : ... dest. MAC ...                                             :
     +---------------+---------------+---------------+---------------+
  12 : ... dest. MAC ! Crypto-stuff & Data ...                       :
     +---------------+---------------+---------------+---------------+
