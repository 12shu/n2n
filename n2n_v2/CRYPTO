crypto protocol v0.0.1

Key negotiation
===============

Diffie-Hellman secured with long term key
see key mgmt recommendations
Pub L = 15360, Priv N = 512 (256 bit level)
to consider: rekeying support

DH support in:
- Gnutls has DH support, but only inside the TLS layer [dh algo?]
- http://cr.yp.to/ecdh.html (ecc, seems good and simple, but not NSA Suite B)
- heimdal (not yet evaluated)
- http://point-at-infinity.org/seccure/ (seems ok)
- polarssl/tropicssl (seems simple)


Session key derivation
======================

HMAC based key derivation function ("HKDF", RFC 5869) is specifically designed
to derive symmetric keys from negotiated shared secrets as in Diffie-Hellman.

HKDF(salt, source_key, infostring, outlen) = K1 | K2 | ... | Kt
    prk = HMAC(salt, source_key)  // (sic!)
    K1 = HMAC(prk, infostring | 0x01)
    K2 = HMAC(prk, K1 | infostring | 0x02)
    K3 = HMAC(prk, K2 | infostring | 0x03) ...

inputs: salt, source key material, infostring
- salt will be a chosen random value of length 48B
- soure key material: the DH shared secret, shall be at least 48B
- infostring will be a n2n specific constant
output: a session key


IV choice
=========

The choice of the IV is of the utmost importance, since the security of GCM
depends on NO IV being used MORE THAN ONCE with the same key.

GCM in IPsec ESP (RFC 4106):
4B salt: unpredictable but constant for SA lifetime
8B IV:   LFSR or counter [garantee uniqueness]

GCM in SSH (RFC 5647) [note: not implemented in openssh 5.8]:
4B fixed
8B invocation counter

We choose an IV correspondingly, keep it secret until it is used and store it
with the other security association information.


Packet format
=============

We choose the encrypting and authenticating AES GCM mode for performance
security. gcm 256 is not implemented in gnutls (but it is in nettle), so we use
128 bit.

to consider:
- which fields to authenticate with GCM, but not encrypt (e.g. MAC addr)
- pad authentication data / plain text to block size?
  [according to nettle spec this is not needed, we might do it anyway on the
   plain text to make statistical analysis more difficult]
- security association explicit in packet?

planned payload AES GCM 128 bit:
?B crypto protocol version [authenticated]
12B IV
---enc---
    ?B  plaintext
	?B  padding (counting up from 1)
	1B  padding length 0-255
-enc end-
16B ICV

old packet format:
common:
	1B  version
	1B  ttl
	2B  flags
	+   pc (packet type)
	16B community
packet:
 A  6B  src mac
 A  6B  dst mac
	if FLAGS_SOCKET:
		2B  socket flags
		2B  dest UDP port
		4B [16B IP6] dest IP4 addr
	if FLAGS_LOCAL_SOCKET:
		2B  socket flags
		2B  dest UDP port
		4B [16B IP6] dest IP4 addr
 A  2B transform ID
	+  payload

P2P:
 1B version
 1B ttl
 2B flags, packet type
16B community
 2B transform
14B Ethernet: 6B MAC + 6B MAC + 2B proto
12B IV  [ENC START]
20B IP
    Payload  [ENC END]
16B ICV

new packet types:
DATA
SN_SYN
SN_ACK
EDGE_SYN
EDGE_ACK
EDGE_SYNACK
EDGE_INFO

A wants to contact B:
B->All: DATA (ARP request - who is A)
A->B: EDGE_INFO via sn (sockets l/r)
A->B: DATA (via sn)
B->A: EDGE_INFO via sn (sockets l/r)
B->A: EDGE_SYN
A->B: EDGE_SYN
B->A: EDGE_ACK
A->B: EDGE_SYNACK

Security Analysis
=================

TODO

The security is based on a shared secret key, which requires that all
communicating parties trust each other.

Not protecting against:
- replay [TODO: consequences?; replay protection like dtls?]
- active MITM with key


References
==========

NSA Suite B
http://www.nsa.gov/ia/programs/suiteb_cryptography/

NIST Key management recommendations
http://csrc.nist.gov/publications/nistpubs/800-57/sp800-57-Part1-revised2_Mar08-2007.pdf p. 63

The Order of Encryption and Authentication for Protecting Communications
http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.106.5488&rep=rep1&type=pdf
(authenticate then encrypt vs encrypt then authenticate discussion)

GCM spec/proposal, http://www.cryptobarn.com/gcm/
http://www.cryptobarn.com/papers/gcm-spec.pdf

NIST GCM spec
http://csrc.nist.gov/publications/nistpubs/800-38D/SP-800-38D.pdf

Cryptolounge GCM
http://www.cryptolounge.org/wiki/GCM

HMAC: Keyed-Hashing for Message Authentication
http://tools.ietf.org/html/rfc2104

The Use of Galois/Counter Mode (GCM) in IPsec Encapsulating Security Payload (ESP)
http://tools.ietf.org/html/rfc4106

The Use of Galois Message Authentication Code (GMAC) in IPsec ESP and AH
http://tools.ietf.org/html/rfc4543

Suite B Cryptographic Suites for IPsec
http://tools.ietf.org/html/rfc4869

An Interface and Algorithms for Authenticated Encryption
http://tools.ietf.org/html/rfc5116

The Transport Layer Security (TLS) Protocol Version 1.2
http://tools.ietf.org/html/rfc5246   Section 6.2.3.2

AES Galois Counter Mode for the Secure Shell Transport Layer Protocol
http://tools.ietf.org/html/rfc5647

On Extract-then-Expand Key Derivation Functions and an HMAC-based KDF (HKDF)
http://webee.technion.ac.il/~hugo/kdf/
http://tools.ietf.org/html/rfc5869

US Secure Hash Algorithms (SHA and SHA-based HMAC and HKDF)
http://tools.ietf.org/html/rfc6234
