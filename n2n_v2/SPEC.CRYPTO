general remarks
===============

Not yet specified, but very important:
- replay protection MUST be addressed [see end of file]

Authenticated fields will be tagged [A], encrypted fields with [E]. Payload
data must never be sent unauthenticated or unencrypted.
User supplied data must never be sent to the supernode, with the exception of
network address like data such as the community name or IP and MAC addresses
in use by edge.

Lengths are noted in octets, unless specified otherwise. "_" denotes a variable
length, which may be zero. "?" means not yet specified.

A description of allowed packet formats follows.

Other cryptographic protocol considerations will be discussed afterwards.


handshake syn
=============

SPI is the security parameter index, a nonce chosen by sender to identify the
(unidirectional) security association.

     len
       4  ZERO
[A]    4  header
[A]    8  community name hash
[A]    4  SPI
[A]    ?  ECDH ephemeral public key
[A]   48  KDF_SALT
       ?  HMAC_IV
      48  HMAC

The SPI is chosen by the sender as a nonce and used as future SA identifier for
this direction.
The KDF_SALT is a chosen random value used to salt the key derivation.
HMAC values will be computed using the corresponding symmetric master key or a
key derived from it.



handshake syn-ack
=================

SPI is the security parameter index, a nonce chosen by sender to identify the
(unidirectional) security association.

     len
       4  ZERO
[A]    4  header
[A]    4  community name hash
[A]    4  SPI
[A]    4  SPI_A
[A]    ?  ECDH ephemeral public key
[A]   48  KDF_SALT
       ?  HMAC_IV
      48  HMAC

The SPI is chosen by the sender as a nonce.
The KDF_SALT is a chosen random value.
SPI_A is SPI of the protocol initiating party. It is used to identify this
reply.

Because session keys are unidirectional, the SPI and KDF_SALT must be chosen
randomly by each party.

after the handshake:
Both parties compute the session keys using the ephpemeral public keys, the key
derivation function and the KDF_SALT. These session keys form the security
associations (SA) identified by the SPI.



payload packet
==============

A session key must be established beforehand by performing a handshake. This
key is used for the authenticating and encrypting cipher AEAD, which can also
authenticate (but not encrypt) additional data.

     len
       4  SPI
      12  AEAD_IV
[AE]   _  payload
      16  AEAD_ICV

The SPI is constant for the life time of the negotiated session key.
The AEAD_IV values must be chosen according to the specification found in
CRYPTO. They must be stored with the SA.

Note that in contrast to the rest of the header, the IV and SPI need not be
authenticated since authentication will fail, if either of them are
manipulated.

AEAD_ICV is the integrity check vector that authenticates the encrypted and
additionally authenticated data.



other goals
===========
Rekeying:
No explicit rekeying is supported. A new session (and thereby a new session key
must be established every 24 hours, plus a random interval to avoid
simultaneous session establishment. New keys are generated every time a
connection timed out and is reestablished.
Any rekeying whatsoever must be protected effectively with the symmetric master
secret key (i.e. not a session key).

Traffic flow confidentiality:
Resistance against statistical analysis is difficult. For very limited
protection we could easily adopt a max. 255 Byte padding. Inside the encrypted
payload a TFC protocol header could direct sophisticated TFC mechanisms in the
future.

!! DoS of supernode:
The short handshake makes the usual DoS protections against e.g. replay attacks
not feasable. This might warrant further study.

!! !! Replay protection:
The encrypted channel with the supernode MUST be protected against replay
attacks. Other channels could be protected as well (mostly relevant for UDP
traffic).



further research to do
======================
- Define the protection goals for the community name.
- hole punch packet type and security implications
